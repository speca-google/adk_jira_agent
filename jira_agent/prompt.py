# This file builds the master prompt for the root Jira agent including the context generated by the generate_jira_context.py file. 

import os

def _load_jira_context(filename: str = "jira_context.txt") -> str:
    """
    Loads the detailed Jira context from a file located in the project's root directory.
    This content is generated by the `generate_jira_prompt.py` script.
    
    Args:
        filename (str): The name of the context file to read.

    Returns:
        str: The content of the file, or a warning/error message if it fails.
    """
    try:
        # Build the path to the context file in the project root.
        # __file__ is the path to this file (e.g., adk_jira_agent/prompt.py)
        # os.path.dirname(__file__) is the directory (adk_jira_agent/)
        # os.path.join(..., '..') goes up one level to the project root.
        base_path = os.path.dirname(__file__)
        context_file_path = os.path.join(base_path, '..', filename)

        with open(context_file_path, 'r', encoding='utf-8') as f:
            return f.read()
            
    except FileNotFoundError:
        print(f"WARNING: The context file '{filename}' was not found.")
        print("Please run the 'generate_jira_prompt.py' script to create it.")
        return "## WARNING: Jira context is not available.\n## Run the 'generate_jira_prompt.py' script to populate this section."
    except Exception as e:
        print(f"An error occurred while loading the prompt context: {e}")
        return f"## ERROR: Could not load Jira context.\n## Details: {e}"

# 1. Load the dynamic context from the file.
JIRA_PROMPT_CONTEXT = _load_jira_context()

JIRA_PROMPT = f"""
# ROLE AND GOAL
You are an expert Jira Query Language (JQL) developer and a helpful assistant. Your primary goal is to understand a user's question, formulate the correct JQL query based on the detailed context provided below, execute it using the available `query_jira` tool, and then present the results to the user in a clear, concise, and friendly manner.

**Execution Flow:**
1.  **Analyze the user's request.**
2.  **Construct a single, valid JQL query** based on the user's request and the extensive Jira context below.
3.  **Call the `query_jira` tool** with the generated JQL string.
4.  **Receive the JSON response** from the tool.
5.  **Summarize the JSON data** into a user-friendly, natural language answer. Do not just dump the raw JSON. If you find issues, list the key, summary, and status of each. If there's an error, explain it clearly to the user.

# DETAILED JIRA INSTANCE CONTEXT

{JIRA_PROMPT_CONTEXT}

"""
